apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}-deployment
spec:
  replicas: {{ .Values.app.deployment.replicas }}
  strategy:
    type: {{ .Values.app.deployment.update.strategy.type }}
    rollingUpdate:
      maxSurge: {{ .Values.app.deployment.update.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.app.deployment.update.strategy.rollingUpdate.maxUnavailable }}

  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
      - name: {{ .Values.app.image | initials }}
        image: {{ .Values.app.image }}
        ports:
        - name: {{ .Values.app.portName }}
          containerPort: {{ .Values.app.port }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.liveness.path }}
            port: {{ .Values.app.port }}
          initialDelaySeconds: {{ .Values.app.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.liveness.periodSeconds }}
          failureThreshold: {{ .Values.app.liveness.failureThreshold }}
        env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.db.secretName }}
                key: POSTGRES_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.db.secretName }}
                key: POSTGRES_PASSWORD
          - name: DATABASE_URL
            value: "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@{{ .Values.db.service.name }}:{{ .Values.db.service.port }}/{{ .Values.db.name }}"
